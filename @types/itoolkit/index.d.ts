/** Declaration file generated by dts-gen */

/**
 * @see https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/IBM%20i%20Technology%20Updates/page/Toolkit%20for%20i%20APIs
 */
declare module "itoolkit" {
  export class iConn {
    constructor(...args: any[]);

    add(...args: any[]): void;

    debug(...args: any[]): void;

    getConnection(...args: any[]): void;

    run(...args: any[]): void;

    setTimeout(...args: any[]): void;
  }

  export class iPgm {
    constructor(...args: any[]);

    /**
     * Add a new parameter element to current iPgm object.
     */
    addParam(value: any, type: string, options?: iPgmAddParamOptions): void;

    /**
     * Add a new parameter element to current iPgm object.
     */
    addParam(valueArray: any[][], options?: iPgmAddParamOptions): void;

    /**
     * Add a new returned element to current iPgm object.
     */
    addReturn(value: string, type: string, options?: any): void;

    /**
     * Convert current iPgm object into XML format which can be used for debug purpose.
     */
    toXML(): string;
  }

  export class iSql {
    constructor(...args: any[]);

    addQuery(...args: any[]): void;

    columnPriv(...args: any[]): void;

    columns(...args: any[]): void;

    commit(...args: any[]): void;

    connect(...args: any[]): void;

    count(...args: any[]): void;

    describe(...args: any[]): void;

    execute(...args: any[]): void;

    fetch(...args: any[]): void;

    foreignKeys(...args: any[]): void;

    free(...args: any[]): void;

    pColumns(...args: any[]): void;

    prepare(...args: any[]): void;

    primaryKeys(...args: any[]): void;

    procedures(...args: any[]): void;

    rowCount(...args: any[]): void;

    setOptions(...args: any[]): void;

    special(...args: any[]): void;

    statistics(...args: any[]): void;

    tablePriv(...args: any[]): void;

    tables(...args: any[]): void;

    toXML(...args: any[]): void;
  }

  export function getClass(object: any): any;

  /**
   * Construct a CL command request string.
   * @description It is recommended to read the "XMLSERVICE call CMD" part of the (http://youngiprofessionals.com/wiki/index.php/XMLSERVICE/XMLSERVICE)[XML service manual] first.
   * @see http://youngiprofessionals.com/wiki/index.php/XMLSERVICE/XMLSERVICE
   */
  export function iCmd(cmd: string, options?: iCmdOptions): any;

  export function iQsh(qsh: any, options: any): any;

  /**
   * Construct a QShell command request string.
   * @description It is recommended to read the "XMLSERVICE call PASE" part of the (http://youngiprofessionals.com/wiki/index.php/XMLSERVICE/XMLSERVICE)[XML service manual]  first.
   * @see http://youngiprofessionals.com/wiki/index.php/XMLSERVICE/XMLSERVICE
   */
  export function iSh(sh: any, options?: iShOptions): any;

  export function xmlToJson(xml: any): any;

  export namespace iConn {
    function add(...args: any[]): void;

    function debug(...args: any[]): void;

    function getConnection(...args: any[]): void;

    function run(...args: any[]): void;

    function setTimeout(...args: any[]): void;
  }

  export namespace iPgm {
    function addParam(...args: any[]): void;

    function addReturn(...args: any[]): void;

    function toXML(...args: any[]): void;
  }

  export namespace iSql {
    function addQuery(...args: any[]): void;

    function columnPriv(...args: any[]): void;

    function columns(...args: any[]): void;

    function commit(...args: any[]): void;

    function connect(...args: any[]): void;

    function count(...args: any[]): void;

    function describe(...args: any[]): void;

    function execute(...args: any[]): void;

    function fetch(...args: any[]): void;

    function foreignKeys(...args: any[]): void;

    function free(...args: any[]): void;

    function pColumns(...args: any[]): void;

    function prepare(...args: any[]): void;

    function primaryKeys(...args: any[]): void;

    function procedures(...args: any[]): void;

    function rowCount(...args: any[]): void;

    function setOptions(...args: any[]): void;

    function special(...args: any[]): void;

    function statistics(...args: any[]): void;

    function tablePriv(...args: any[]): void;

    function tables(...args: any[]): void;

    function toXML(...args: any[]): void;
  }

  /**
   * The optional parameter indicating how to process the command.
   */
  type iCmdOptions = {
    /**
     * cmd - cmd only return true/false
     * system - system utility return CPFxxxx
     * rexx - return output parms and CPFxxxx
     */
    exec?: "cmd" | "system" | "rexx";
    /**
     * on - script stops, full error report
     * off - script continues, job error log (default)
     * fast - script continues, brief error log
     */
    error?: "on" | "off" | "fast";
    /**
     * on - output value is in raw hex format
     * off - output value is encoded by CCSID (default)
     */
    hex?: "on" | "off";
    /**
     * Convert to this CCSID before system call.
     */
    before?: string;
    /**
     * Convert output of system call to this CCSID.
     */
    after?: string;
  };

  /**
   * The optional parameter indicating how to process the command.
   */
  type iShOptions = {
    /**
     * on - split the output row by row
     * off - the output is a block of text (default)
     */
    rows?: "on" | "off";
    /**
     * on - script stops, full error report
     * off - script continues, job error log (default)
     * fast - script continues, brief error log
     */
    error?: "on" | "off" | "fast";
    /**
     * on - output value is in raw hex format
     * off - output value is encoded by CCSID (default)
     */
    hex?: "on" | "off";
    /**
     * Convert to this CCSID before system call.
     */
    before?: string;
    /**
     * Convert output of system call to this CCSID.
     */
    after?: string;
  };

  type iPgmAddParamOptions = {
    dim?: number;
    varying?: "on" | "off" | "2" | "4";
    enddo?: "label";
    setlen?: string;
    offset?: "label";
    trim?: "on" | "off";
    /**
     * on - output value is in raw hex format
     * off - output value is encoded by CCSID (default)
     */
    hex?: "on" | "off";
    /**
     * Convert to this CCSID before system call.
     */
    before?: string;
    /**
     * Convert output of system call to this CCSID.
     */
    after?: string;
  };
}

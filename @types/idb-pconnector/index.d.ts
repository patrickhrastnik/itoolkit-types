/** Declaration file generated by dts-gen */

declare module "idb-pconnector" {
  /**
   * @class Connection
   * @constructor
   */
  export class Connection {
    constructor(...args: any[]);

    /**
     * Closes the Connection to the DB and frees the connection object.
     * @returns {Promise} - Promise object represents the closure of the Connection.
     * @memberof Connection
     */
    close(): Promise<any>;

    /**
     * Establishes a Connection to the database.
     * @param {string} [url] - The url of the database to connect to, which Defaults to '*LOCAL'.
     * @param {string} [username] - The user name for the database user.
     * @param {string} [password] - The password for the database user.
     * @returns {object} - The dbConn Object with an established connection.
     * @memberof Connection
     */
    connect(url?: string, username?: string, password?: string): Connection;

    /**
     * Prints more detailed info if choice = true. Turned off by setting choice = false.
     * @param {boolean} choice - The option either true or false to turn on debugging.
     * @returns {Promise} - Promise object represents the debug method being set to the choice specified.
     * @memberof Connection
     */
    debug(choice: boolean): Promise<any>;

    /**
     * Disconnects an existing connection to the database.
     * @returns {Promise} - Promise object represents the disconnect of the Connection.
     * @memberof Connection
     */
    disconn(): Promise<any>;

    /**
     * If a connection attribute exists then return type String or Int depending on the attribute type
     * @param {number} attribute
     * @returns {Promise} - Promise object represents the the current settings for the specified connection attribute.
     * Further Documentation {@link https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_73/cli/rzadpfnsconx.htm HERE}
     * @memberof Connection
     */
    getConnAttr(attribute: number): Promise<any>;

    /**
     * Returns a Statment Object initialized to the current dbConn Connection.
     * @returns {object} - A new Statement initialized with the current dbconn.
     * @memberof Connection
     */
    getStatement(): Statement;

    /**
     * Checks if the Connection object is connected to the db.
     * @returns {boolean} - true or false indicating if the Connection object is currently connected.
     */
    isConnected(): boolean;

    /**
     * Sets the ConnAttr. Attribute should be INT.
     * @param {number} attribute - The attribute to be set refer to the getConAttr example to view available attributes.
     * @param {(string | number)} value - The value to set the attribute to. Can be String or Int depending the attribute.
     * @returns {Promise} - Promise object represents the execution of the setConnAttr().
     * @memberof Connection
     */
    setConnAttr(attribute: number, value: string | number): Promise<any>;

    /**
     * Checks if the given SQL is valid and interprets vendor escape clauses.
     * @param {string} sql - The sql string to be validated.
     * @returns {Promise} - Promise object represents the transformed SQL string that is seen by the data source.
     */
    validStmt(sql: string): Promise<any>;
  }

  /**
   * Manages a list of DBPoolConnection instances.
   *
   */
  export class DBPool {
    /**
     * Manages a list of DBPoolConnection instances.
     * Constructor to instantiate a new instance of a DBPool class given the `database` and `config`
     * @param {object} database - Object includes the `url`, `username`, and `password`.
     * @param {object} config - Object includes the `incrementSize` and `debug`.
     * @constructor
     */
    constructor(database?: object, config?: object);

    /**
     * Finds and returns the first available Connection.
     * @returns {DBPoolConnection} - one connection from the DBPool.
     */
    attach(): Connection;

    /**
     * Instantiates a new instance of DBPoolConnection with an `index` and appends it to the pool.
     * Assumes the database of the pool when establishing the connection.
     * @param {number} index - An identifier to id the connection for debug purposes.
     */
    createConnection(index: number): Connection;

    /**
     * Frees a connection (Returns the connection "Available" back to true)
     * closes any statements and gets a new statement.
     * @param {DBPoolConnection} connection
     * @returns {boolean} - true if detached succesfully
     */
    detach(connection: Connection): void;

    /**
     * Frees all connections in the pool (Sets "Available" back to true for all)
     * closes any statements and gets a new statement.
     * @returns {boolean} - true if all were detached succesfully
     */
    detachAll(): boolean;

    /**
     *Internal helper function to format params and set Param Indicator & Bind Type
     * @param {array} boundParams - the array to push the formatted parmeter.
     * @param {object} options - an object with config options {io: in | out | both, asClob: true | false}.
     */
    private formatParams(boundParams: any[], options: {}): void;

    /**
     * Internal function used to log debug information to the console.
     * @param {string} message - the message to log.
     */
    private log(message: string): void;

    /**
     * Shortcut to prepare ,bind, and execute. Just provide the sql and the params as an array.
     * @param {string} sql - the sql to prepare , include parameter markers (?, ?, ...)
     * @param {array} [params] - an optional array of values to bind. order of the values in the array must match the
     * order of the desired parameter marker in the sql string.
     * @return {object} - In the Format: {resultSet: [], outputParams: []}
     * if the Prepared SQL returns result set it is returned as an array of objects.
     * if the Prepared SQL returns output parameters it is returned as an array of objects/
     * else null will be returned indicating that there is no result set or outputParams.
     */
    prepareExecute(
      sql: string,
      params: any[],
      object: {}
    ): { resultSet: any[]; outputParams: any[] };

    /**
     * Retires a connection from being used and removes it from the pool
     * @param {DBPoolConnection} connection
     */
    retire(connection: Connection): void;

    /**
     * Retires (Removes) all connections from being used again
     * @returns {boolean} - true if all were retired succesfully
     */
    retireAll(): void;

    /**
     * Shorthand to exec a statement , just provide the sql to run.
     * @param {string} sql - the sql statment to execute.
     * @return {array} - if the SQL returns a result set it is returned as an array of objects.
     *  else if no result set is available null is returned. caller should check if null is returned.
     */
    runSql(sql: string): any[];

    /**
     * Sets the connection attribute for each a DBPoolConnection in the pool.
     * @param {object} connectionAttribute with the properties {attribute: integer, value: integer | String}
     */
    setConnectionAttribute(connectionAttribute: {
      attribute: number;
      value: number | String;
    }): void;

    /**
     *Internal helper function to format params and set Param Indicator & Bind Type
     * @param {array} params - an array of values to bind. type of values should be (string , number , or null)
     * @param {object} options - an object with config options to set for all parameters.
     * Currently, the input/output indicatior is the only available option to set. {io: in | out | both}.
     * This will overide the default which is to bind as 'both'.
     * @returns {array} - an array of bounded params properly formated to use.
     */
    setupParams(params: any[], options: {}): any[];
  }

  /**
   * @class Statement
   * @constructor
   * @param {Object} [connection] - A Connection Object to initialize the Statement. If a connection is not provided one will be initialized for the statement.
   */
  export class Statement {
    constructor(...args: any[]);

    /**
     * Shorthand for bindParam
     * @param {Array} params - An Array of the parameter list. See `bindParam` for additional documentation.
     * @memberof Statement
     */
    bind(params: BindParamParameter[]): Promise<any>;

    /**
     * Associates parameter markers in an SQL statement to app variables.
     * @param {Array} params - An Array of the parameter list. Each parameter element will also be an Array with 3 values (Value, In/out Type, Indicator).
     * @returns {Promise} - Promise object represents the execution of bindParam().
     * @memberof Statement
     */
    bindParam(params: BindParamParameter[]): Promise<any>;

    /**
     * Ends and frees the statement object.
     * @returns {Promise} - Promise object represents the execution of close().
     * @memberof Statement
     */
    close(): Promise<any>;

    /**
     * Closes the cursor associated with the dbstmt object and discards any pending results.
     * @returns {Promise} - Promise object represents the execution of closeCursor().
     * @memberof Statement
     */
    closeCursor(): Promise<any>;

    /**
     * Adds all changes to the database that have been made on the connection since connect time.
     * @returns {Promise} - Promise object represents the execution of Commit().
     * @memberof Statement
     */
    commit(): Promise<any>;

    /**
     * performs action of given SQL String. The exec() method does not work with stored procedure calls use execute() instead.
     * @param {string} sqlString
     * @returns the result set as an array.
     * @returns {Promise} - Promise object represents the result set from the exection of exec().
     * @memberof Statement
     */
    exec(sqlString: string): Promise<any>;

    /**
     * Runs a statement that was successfully prepared using prepare().
     * Use execute() for stored procedure calls.
     * @returns {Promise} - Promise object represents the execution of execute().
     * @memberof Statement
     */
    execute(): Promise<any[]>;

    /**
     * If a result exists, retrieve a row from the result set
     * @returns {Promise | null} - Promise object represents the row that was retrieved from the execution of fetch().
     * when no data is found null is returned , indicating there ws nothing to return from fetch call.
     * @memberof Statement
     */
    fetch(): Promise<any>;

    /**
     * If a result set exists, retrieve all the rows of data from the result set.
     * @returns {Promise} - Promise object represents the the an array containing the result that was retrieved from the execution of fetchAll().
     * @memberof Statement
     */
    fetchAll(): Promise<any>;

    /**
     * Helper function to simplify function bodies like fieldName or fieldNullable.
     * Requires an int index parameter. If a valid index is provided, returns the name of the indicated field.
     * @param suffix The suffix of the function name to call.
     * @param {number} index - The position of the field within the table. It is 0 based.
     * @memberof Statement
     */
    field(suffix: any, index: number): Promise<any>;

    /**
     * Requires an int index parameter. If a valid index is provided, returns the name of the indicated field.
     * @param {number} index - The position of the field within the table. It is 0 based.
     * @returns {Promise} - Promise object represents the the String that was retrieved from the execution of fieldName().
     * @memberof Statement
     */
    fieldName(index: number): Promise<any>;

    /**
     * Requires an int index parameter. If a valid index is provided, returns t/f if the indicated field can be Null
     * @param {number} index - The position of the field within the table. It is 0 based.
     * @returns {Promise} - Promise object represents the the boolean that was retrieved from the execution of fieldNullable().
     * @memberof Statement
     */
    fieldNullable(index: number): Promise<any>;

    /**
     * Requires an int index parameter. If a valid index is provided, returns the precision of the indicated field
     * @param {number} index - The position of the field within the table. It is 0 based.
     * @returns {Promise} - Promise object represents the the Number that was retrieved from the execution of fieldPrecise().
     * @memberof Statement
     */
    fieldPrecise(index: number): Promise<any>;

    /**
     * Requires an int index parameter. If a valid index is provided, returns the scale of the indicated column
     * @param {number} index - The position of the field within the table. It is 0 based.
     * @returns {Promise} - Promise object represents the the Number that was retrieved from the execution of fieldScale().
     * @memberof Statement
     */
    fieldScale(index: number): Promise<any>;

    /**
     * requires an int index parameter. If a valid index is provided, returns the data type of the indicated field
     * @param {number} index - the postion of the field within the table. It is 0 based.
     * @returns {Promise} - Promise object represents the the Number that was retrieved from the execution of fieldType().
     * @memberof Statement
     */
    fieldType(index: number): Promise<any>;

    /**
     * requires an int index parameter. If a valid index is provided, returns the field width of the indicated field
     * @param {number} index - the postion of the field within the table. It is 0 based.
     * @returns {Promise} - Promise object represents the the Number that was retrieved from the execution of fieldWidth().
     * @memberof Statement
     */
    fieldWidth(index: number): Promise<any>;

    /**
     * If a valid Statment attribute is provided , returns the current settings for the specified Statement attribute.
     * Refer to the list below for valid Statement Attributes.
     * @param {number} attribute - the statement attribute to get
     * @returns {Promise} Promise object represents the the String | Number that was retrieved from the execution of getStmtAttr().
     * @memberof Statement
     * Further Documentation {@link https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_73/cli/rzadpfnsstma.htm HERE}
     */
    getStmtAttr(attribute: number): Promise<any>;

    /**
     * Determines whether there is more information available on the statement
     * @returns {Promise} - Promise object represents the execution of nextResult().
     * @memberof Statement
     */
    nextResult(): Promise<any>;

    /**
     * If a result is available, retrieve number of fields contained in result.
     * @returns {Promise} - Promise object represents the Number returned from the execution of numFields().
     * @memberof Statement
     */
    numFields(): Promise<any>;

    /**
     * if a query was performed ,retrieves number of rows that were effected by a query
     * @returns {Promise} - Promise object represents the Number returned from the execution of numRows().
     * @memberof Statement
     */
    numRows(): Promise<any>;

    /**
     * If valid SQL is provided, prepare SQL and send it to the DBMS.
     * @param {string} sqlString - The SQL string to be prepared.
     * @returns {Promise} - Promise object represents the the execution of prepare().
     * @example - View the examples located at the excute() method.
     * @memberof Statement
     */
    prepare(sqlString: string): Promise<any>;

    /**
     * Reverts changes to the database that have been made on the connection since connect time or the previous call to commit().
     * @memberof Statement
     */
    rollback(): Promise<any>;

    /**
     * If a valid attribute and value is provided, set StmtAttr indicate Attribute. Refer to the example @getStmtAttr for a list of valid Statement Attributes.
     * @param {number} attribute - must be an int.
     * @param {(string | number)} value -  can String or Int depending on the attribute
     * @returns {Promise} - Promise object represents the execution of setStmtAttr().
     * @memberof Statement
     */
    setStmtAttr(attribute: number, value: string | number): Promise<any>;

    /**
     * Returns the diagnostic information associated with the most recently called function for a particular statement, connection, or environment handler.
     * @param {number} hType - Indicates the handler type of diagnostic information.
     * @example hType can be following values:
     * SQL_HANDLE_ENV:Retrieve the environment diagnostic information
     * SQL_HANDLE_DBC:Retrieve the connection diagnostic information
     * SQL_HANDLE_STMT:Retrieve the statement diagnostic information
     * @param {number} index - Indicates which error should be retrieved. The first error record index is number 1.
     * @returns {Promise} - Promise object represents Number retrieved from the execution of stmtError().
     * @memberof Statement
     */
    stmtError(hType: SqlHandleHType, index: number): Promise<any>;
  }

  /**
   * Pseudo-Typ für Parameter-Definitionen
   */
  type BindParamIo = number;

  /**
   * Pseudo-Typ für Sql Handle Type Parameter-Definition
   */
  type SqlHandleHType = number;

  export const BINARY: number;

  export const BLOB: number;

  export const BOOLEAN: number;

  export const CHAR: number;

  export const CLOB: number;

  export const IN: BindParamIo;

  export const INOUT: BindParamIo;

  export const INT: number;

  export const NULL: number;

  export const NUMERIC: number;

  export const OUT: BindParamIo;

  export const ROUND_CEILING: number;

  export const ROUND_DOWN: number;

  export const ROUND_FLOOR: number;

  export const ROUND_HALF_DOWN: number;

  export const ROUND_HALF_EVEN: number;

  export const ROUND_HALF_UP: number;

  export const ROUND_UP: number;

  export const SQL_ACCESS_MODE: number;

  export const SQL_ACTIVE_CONNECTIONS: number;

  export const SQL_ACTIVE_STATEMENTS: number;

  export const SQL_AF_ALL: number;

  export const SQL_AF_AVG: number;

  export const SQL_AF_COUNT: number;

  export const SQL_AF_DISTINCT: number;

  export const SQL_AF_MAX: number;

  export const SQL_AF_MIN: number;

  export const SQL_AF_SUM: number;

  export const SQL_AGGREGATE_FUNCTIONS: number;

  export const SQL_ALL_EXCEPT_LIKE: number;

  export const SQL_ALL_IO: number;

  export const SQL_ALL_TYPES: number;

  export const SQL_API_SQLALLOCCONNECT: number;

  export const SQL_API_SQLALLOCENV: number;

  export const SQL_API_SQLALLOCHANDLE: number;

  export const SQL_API_SQLALLOCSTMT: number;

  export const SQL_API_SQLBINDCOL: number;

  export const SQL_API_SQLBINDFILETOCOL: number;

  export const SQL_API_SQLBINDFILETOPARAM: number;

  export const SQL_API_SQLBINDPARAM: number;

  export const SQL_API_SQLBINDPARAMETER: number;

  export const SQL_API_SQLCANCEL: number;

  export const SQL_API_SQLCLOSECURSOR: number;

  export const SQL_API_SQLCOLATTRIBUTE: number;

  export const SQL_API_SQLCOLATTRIBUTES: number;

  export const SQL_API_SQLCOLATTRIBUTESW: number;

  export const SQL_API_SQLCOLATTRIBUTEW: number;

  export const SQL_API_SQLCOLUMNPRIVILEGES: number;

  export const SQL_API_SQLCOLUMNPRIVILEGESW: number;

  export const SQL_API_SQLCOLUMNS: number;

  export const SQL_API_SQLCOLUMNSW: number;

  export const SQL_API_SQLCONNECT: number;

  export const SQL_API_SQLCONNECTW: number;

  export const SQL_API_SQLCOPYDESC: number;

  export const SQL_API_SQLDATASOURCES: number;

  export const SQL_API_SQLDATASOURCESW: number;

  export const SQL_API_SQLDESCRIBECOL: number;

  export const SQL_API_SQLDESCRIBECOLW: number;

  export const SQL_API_SQLDESCRIBEPARAM: number;

  export const SQL_API_SQLDISCONNECT: number;

  export const SQL_API_SQLDRIVERCONNECT: number;

  export const SQL_API_SQLENDTRAN: number;

  export const SQL_API_SQLERROR: number;

  export const SQL_API_SQLERRORW: number;

  export const SQL_API_SQLEXECDIRECT: number;

  export const SQL_API_SQLEXECDIRECTW: number;

  export const SQL_API_SQLEXECUTE: number;

  export const SQL_API_SQLEXTENDEDFETCH: number;

  export const SQL_API_SQLFETCH: number;

  export const SQL_API_SQLFETCHSCROLL: number;

  export const SQL_API_SQLFOREIGNKEYS: number;

  export const SQL_API_SQLFOREIGNKEYSW: number;

  export const SQL_API_SQLFREECONNECT: number;

  export const SQL_API_SQLFREEENV: number;

  export const SQL_API_SQLFREEHANDLE: number;

  export const SQL_API_SQLFREESTMT: number;

  export const SQL_API_SQLGETCOL: number;

  export const SQL_API_SQLGETCOLW: number;

  export const SQL_API_SQLGETCONNECTATTR: number;

  export const SQL_API_SQLGETCONNECTATTRW: number;

  export const SQL_API_SQLGETCONNECTOPTION: number;

  export const SQL_API_SQLGETCONNECTOPTIONW: number;

  export const SQL_API_SQLGETCURSORNAME: number;

  export const SQL_API_SQLGETCURSORNAMEW: number;

  export const SQL_API_SQLGETDATA: number;

  export const SQL_API_SQLGETDESCFIELD: number;

  export const SQL_API_SQLGETDESCFIELDW: number;

  export const SQL_API_SQLGETDESCREC: number;

  export const SQL_API_SQLGETDESCRECW: number;

  export const SQL_API_SQLGETDIAGFIELD: number;

  export const SQL_API_SQLGETDIAGFIELDW: number;

  export const SQL_API_SQLGETDIAGREC: number;

  export const SQL_API_SQLGETDIAGRECW: number;

  export const SQL_API_SQLGETENVATTR: number;

  export const SQL_API_SQLGETFUNCTIONS: number;

  export const SQL_API_SQLGETINFO: number;

  export const SQL_API_SQLGETINFOW: number;

  export const SQL_API_SQLGETLENGTH: number;

  export const SQL_API_SQLGETPOSITION: number;

  export const SQL_API_SQLGETPOSITIONW: number;

  export const SQL_API_SQLGETSTMTATTR: number;

  export const SQL_API_SQLGETSTMTATTRW: number;

  export const SQL_API_SQLGETSTMTOPTION: number;

  export const SQL_API_SQLGETSTMTOPTIONW: number;

  export const SQL_API_SQLGETSUBSTRING: number;

  export const SQL_API_SQLGETSUBSTRINGW: number;

  export const SQL_API_SQLGETTYPEINFO: number;

  export const SQL_API_SQLGETTYPEINFOW: number;

  export const SQL_API_SQLLANGUAGES: number;

  export const SQL_API_SQLMORERESULTS: number;

  export const SQL_API_SQLNATIVESQL: number;

  export const SQL_API_SQLNATIVESQLW: number;

  export const SQL_API_SQLNEXTRESULT: number;

  export const SQL_API_SQLNUMPARAMS: number;

  export const SQL_API_SQLNUMRESULTCOLS: number;

  export const SQL_API_SQLPARAMDATA: number;

  export const SQL_API_SQLPARAMOPTIONS: number;

  export const SQL_API_SQLPREPARE: number;

  export const SQL_API_SQLPREPAREW: number;

  export const SQL_API_SQLPRIMARYKEYS: number;

  export const SQL_API_SQLPRIMARYKEYSW: number;

  export const SQL_API_SQLPROCEDURECOLUMNS: number;

  export const SQL_API_SQLPROCEDURECOLUMNSW: number;

  export const SQL_API_SQLPROCEDURES: number;

  export const SQL_API_SQLPROCEDURESW: number;

  export const SQL_API_SQLPUTDATA: number;

  export const SQL_API_SQLRELEASEENV: number;

  export const SQL_API_SQLROWCOUNT: number;

  export const SQL_API_SQLSETCONNECTATTR: number;

  export const SQL_API_SQLSETCONNECTATTRW: number;

  export const SQL_API_SQLSETCONNECTOPTION: number;

  export const SQL_API_SQLSETCONNECTOPTIONW: number;

  export const SQL_API_SQLSETCURSORNAME: number;

  export const SQL_API_SQLSETCURSORNAMEW: number;

  export const SQL_API_SQLSETDESCFIELD: number;

  export const SQL_API_SQLSETDESCFIELDW: number;

  export const SQL_API_SQLSETDESCREC: number;

  export const SQL_API_SQLSETENVATTR: number;

  export const SQL_API_SQLSETPARAM: number;

  export const SQL_API_SQLSETPOS: number;

  export const SQL_API_SQLSETSTMTATTR: number;

  export const SQL_API_SQLSETSTMTATTRW: number;

  export const SQL_API_SQLSETSTMTOPTION: number;

  export const SQL_API_SQLSETSTMTOPTIONW: number;

  export const SQL_API_SQLSPECIALCOLUMNS: number;

  export const SQL_API_SQLSPECIALCOLUMNSW: number;

  export const SQL_API_SQLSTARTTRAN: number;

  export const SQL_API_SQLSTATISTICS: number;

  export const SQL_API_SQLSTATISTICSW: number;

  export const SQL_API_SQLTABLEPRIVILEGES: number;

  export const SQL_API_SQLTABLEPRIVILEGESW: number;

  export const SQL_API_SQLTABLES: number;

  export const SQL_API_SQLTABLESW: number;

  export const SQL_API_SQLTRANSACT: number;

  export const SQL_ARD_TYPE: number;

  export const SQL_ATTR_2ND_LEVEL_TEXT: number;

  export const SQL_ATTR_ACCESS_MODE: number;

  export const SQL_ATTR_ADOPT_OWNER_AUTH: number;

  export const SQL_ATTR_ANSI_APP: number;

  export const SQL_ATTR_APP_PARAM_DESC: number;

  export const SQL_ATTR_APP_ROW_DESC: number;

  export const SQL_ATTR_AUTOCOMMIT: number;

  export const SQL_ATTR_AUTO_IPD: number;

  export const SQL_ATTR_BIND_TYPE: number;

  export const SQL_ATTR_CLOSEONEOF: number;

  export const SQL_ATTR_COMMIT: number;

  export const SQL_ATTR_CONCURRENCY: number;

  export const SQL_ATTR_CONCURRENT_ACCESS_RESOLUTION: number;

  export const SQL_ATTR_CONN_SORT_SEQUENCE: number;

  export const SQL_ATTR_CORRELATOR: number;

  export const SQL_ATTR_CURSOR_HOLD: number;

  export const SQL_ATTR_CURSOR_SCROLLABLE: number;

  export const SQL_ATTR_CURSOR_SENSITIVITY: number;

  export const SQL_ATTR_CURSOR_TYPE: number;

  export const SQL_ATTR_DATE_FMT: number;

  export const SQL_ATTR_DATE_SEP: number;

  export const SQL_ATTR_DBC_DEFAULT_LIB: number;

  export const SQL_ATTR_DBC_SYS_NAMING: number;

  export const SQL_ATTR_DECFLOAT_ROUNDING_MODE: number;

  export const SQL_ATTR_DECIMAL_SEP: number;

  export const SQL_ATTR_DEFAULT_LIB: number;

  export const SQL_ATTR_ENVHNDL_COUNTER: number;

  export const SQL_ATTR_ESCAPE_CHAR: number;

  export const SQL_ATTR_EXTENDED_COL_INFO: number;

  export const SQL_ATTR_EXTENDED_INDICATORS: number;

  export const SQL_ATTR_FOR_FETCH_ONLY: number;

  export const SQL_ATTR_FREE_LOCATORS: number;

  export const SQL_ATTR_FULL_OPEN: number;

  export const SQL_ATTR_HEX_LITERALS: number;

  export const SQL_ATTR_IMP_PARAM_DESC: number;

  export const SQL_ATTR_IMP_ROW_DESC: number;

  export const SQL_ATTR_INCLUDE_NULL_IN_LEN: number;

  export const SQL_ATTR_INFO_ACCTSTR: number;

  export const SQL_ATTR_INFO_APPLNAME: number;

  export const SQL_ATTR_INFO_PROGRAMID: number;

  export const SQL_ATTR_INFO_USERID: number;

  export const SQL_ATTR_INFO_WRKSTNNAME: number;

  export const SQL_ATTR_JOB_SORT_SEQUENCE: number;

  export const SQL_ATTR_MAX_PRECISION: number;

  export const SQL_ATTR_MAX_SCALE: number;

  export const SQL_ATTR_MIN_DIVIDE_SCALE: number;

  export const SQL_ATTR_NULLT_ARRAY_RESULTS: number;

  export const SQL_ATTR_NULLT_OUTPUT_PARMS: number;

  export const SQL_ATTR_NULL_REQUIRED: number;

  export const SQL_ATTR_NUMBER_RESULTSET_ROWS_PTR: number;

  export const SQL_ATTR_OLD_MTADTA_BEHAVIOR: number;

  export const SQL_ATTR_OUTPUT_NTS: number;

  export const SQL_ATTR_PARAMSET_SIZE: number;

  export const SQL_ATTR_PARAMS_PROCESSED_PTR: number;

  export const SQL_ATTR_PARAM_BIND_TYPE: number;

  export const SQL_ATTR_PARAM_STATUS_PTR: number;

  export const SQL_ATTR_PREFETCH: number;

  export const SQL_ATTR_QUERY_OPTIMIZE_GOAL: number;

  export const SQL_ATTR_READONLY: number;

  export const SQL_ATTR_READWRITE_UNKNOWN: number;

  export const SQL_ATTR_REQUIRE_PROFILE: number;

  export const SQL_ATTR_ROWSET_SIZE: number;

  export const SQL_ATTR_ROWS_FETCHED_PTR: number;

  export const SQL_ATTR_ROW_ARRAY_SIZE: number;

  export const SQL_ATTR_ROW_BIND_TYPE: number;

  export const SQL_ATTR_ROW_STATUS_PTR: number;

  export const SQL_ATTR_SAVEPOINT_NAME: number;

  export const SQL_ATTR_SERVER_MODE: number;

  export const SQL_ATTR_SET_SSA: number;

  export const SQL_ATTR_SYSBAS_CMT: number;

  export const SQL_ATTR_SYSCAP: number;

  export const SQL_ATTR_SYS_NAMING: number;

  export const SQL_ATTR_TIMESTAMP_PREC: number;

  export const SQL_ATTR_TIME_FMT: number;

  export const SQL_ATTR_TIME_SEP: number;

  export const SQL_ATTR_TRACE: number;

  export const SQL_ATTR_TRACE_CLI: number;

  export const SQL_ATTR_TRACE_DBMON: number;

  export const SQL_ATTR_TRACE_DEBUG: number;

  export const SQL_ATTR_TRACE_JOBLOG: number;

  export const SQL_ATTR_TRACE_STRTRC: number;

  export const SQL_ATTR_TRUNCATION_RTNC: number;

  export const SQL_ATTR_TXN_EXTERNAL: number;

  export const SQL_ATTR_TXN_INFO: number;

  export const SQL_ATTR_TXN_ISOLATION: number;

  export const SQL_ATTR_UCS2: number;

  export const SQL_ATTR_UTF8: number;

  export const SQL_ATTR_WRITE: number;

  export const SQL_AUTOCOMMIT: number;

  export const SQL_AUTOCOMMIT_OFF: number;

  export const SQL_AUTOCOMMIT_ON: number;

  export const SQL_BIGINT: number;

  export const SQL_BIGINT_PREC: number;

  export const SQL_BINARY: number;

  export const SQL_BIND_BY_COLUMN: number;

  export const SQL_BIND_BY_ROW: number;

  export const SQL_BIND_TYPE: number;

  export const SQL_BLOB: number;

  export const SQL_BLOB_LOCATOR: number;

  export const SQL_CASCADE: number;

  export const SQL_CATALOG_LOCATION: number;

  export const SQL_CATALOG_NAME: number;

  export const SQL_CATALOG_NAME_SEPARATOR: number;

  export const SQL_CATALOG_TERM: number;

  export const SQL_CATALOG_USAGE: number;

  export const SQL_CB_CLOSE: number;

  export const SQL_CB_DELETE: number;

  export const SQL_CB_PRESERVE: number;

  export const SQL_CHAR: number;

  export const SQL_CLOB: number;

  export const SQL_CLOB_LOCATOR: number;

  export const SQL_CLOSE: number;

  export const SQL_CN_ANY: number;

  export const SQL_CN_DIFFERENT: number;

  export const SQL_CN_NONE: number;

  export const SQL_CODE_DATE: number;

  export const SQL_CODE_TIME: number;

  export const SQL_CODE_TIMESTAMP: number;

  export const SQL_COLUMN_ALIAS: number;

  export const SQL_COLUMN_ALLOC_AUTO: number;

  export const SQL_COLUMN_ALLOC_TYPE: number;

  export const SQL_COLUMN_ALLOC_USER: number;

  export const SQL_COLUMN_AUTO_INCREMENT: number;

  export const SQL_COLUMN_BASE_COLUMN: number;

  export const SQL_COLUMN_BASE_SCHEMA: number;

  export const SQL_COLUMN_BASE_TABLE: number;

  export const SQL_COLUMN_COUNT: number;

  export const SQL_COLUMN_DATA_PTR: number;

  export const SQL_COLUMN_DATETIME_INTERVAL_CODE: number;

  export const SQL_COLUMN_DISPLAY_SIZE: number;

  export const SQL_COLUMN_INDICATOR_PTR: number;

  export const SQL_COLUMN_LABEL: number;

  export const SQL_COLUMN_LENGTH: number;

  export const SQL_COLUMN_LENGTH_PTR: number;

  export const SQL_COLUMN_MONEY: number;

  export const SQL_COLUMN_NAME: number;

  export const SQL_COLUMN_NULLABLE: number;

  export const SQL_COLUMN_PRECISION: number;

  export const SQL_COLUMN_SCALE: number;

  export const SQL_COLUMN_SEARCHABLE: number;

  export const SQL_COLUMN_TYPE: number;

  export const SQL_COLUMN_UNNAMED: number;

  export const SQL_COLUMN_UPDATABLE: number;

  export const SQL_COMMIT: number;

  export const SQL_COMMIT_ALL: number;

  export const SQL_COMMIT_CHG: number;

  export const SQL_COMMIT_CS: number;

  export const SQL_COMMIT_HOLD: number;

  export const SQL_COMMIT_NONE: number;

  export const SQL_COMMIT_RR: number;

  export const SQL_COMMIT_RS: number;

  export const SQL_COMMIT_UR: number;

  export const SQL_CONCURRENCY: number;

  export const SQL_CONCURRENT_ACCESS_RESOLUTION_UNSET: number;

  export const SQL_CONCUR_LOCK: number;

  export const SQL_CONCUR_READ_ONLY: number;

  export const SQL_CONCUR_ROWVER: number;

  export const SQL_CONCUR_VALUES: number;

  export const SQL_CONNECTION_JOB_NAME: number;

  export const SQL_CONVERT_BIGINT: number;

  export const SQL_CONVERT_BINARY: number;

  export const SQL_CONVERT_BIT: number;

  export const SQL_CONVERT_BLOB: number;

  export const SQL_CONVERT_CHAR: number;

  export const SQL_CONVERT_CLOB: number;

  export const SQL_CONVERT_DATE: number;

  export const SQL_CONVERT_DBCLOB: number;

  export const SQL_CONVERT_DECFLOAT16: number;

  export const SQL_CONVERT_DECFLOAT34: number;

  export const SQL_CONVERT_DECFLOAT7: number;

  export const SQL_CONVERT_DECIMAL: number;

  export const SQL_CONVERT_DOUBLE: number;

  export const SQL_CONVERT_FLOAT: number;

  export const SQL_CONVERT_FUNCTIONS: number;

  export const SQL_CONVERT_INTEGER: number;

  export const SQL_CONVERT_INTERVAL_DAY_TIME: number;

  export const SQL_CONVERT_INTERVAL_YEAR_MONTH: number;

  export const SQL_CONVERT_LONGVARBINARY: number;

  export const SQL_CONVERT_LONGVARCHAR: number;

  export const SQL_CONVERT_NUMERIC: number;

  export const SQL_CONVERT_REAL: number;

  export const SQL_CONVERT_SMALLINT: number;

  export const SQL_CONVERT_TIME: number;

  export const SQL_CONVERT_TIMESTAMP: number;

  export const SQL_CONVERT_TINYINT: number;

  export const SQL_CONVERT_VARBINARY: number;

  export const SQL_CONVERT_VARCHAR: number;

  export const SQL_CONVERT_WCHAR: number;

  export const SQL_CONVERT_WLONGVARCHAR: number;

  export const SQL_CONVERT_WVARCHAR: number;

  export const SQL_CORRELATION_NAME: number;

  export const SQL_CURSOR_COMMIT_BEHAVIOR: number;

  export const SQL_CURSOR_DYNAMIC: number;

  export const SQL_CURSOR_FORWARD_ONLY: number;

  export const SQL_CURSOR_KEYSET_DRIVEN: number;

  export const SQL_CURSOR_ROLLBACK_BEHAVIOR: number;

  export const SQL_CURSOR_SENSITIVE: number;

  export const SQL_CURSOR_STATIC: number;

  export const SQL_CURSOR_TYPE: number;

  export const SQL_CVT_BIGINT: number;

  export const SQL_CVT_BINARY: number;

  export const SQL_CVT_BIT: number;

  export const SQL_CVT_BLOB: number;

  export const SQL_CVT_CHAR: number;

  export const SQL_CVT_CLOB: number;

  export const SQL_CVT_DATE: number;

  export const SQL_CVT_DBCLOB: number;

  export const SQL_CVT_DECFLOAT16: number;

  export const SQL_CVT_DECFLOAT34: number;

  export const SQL_CVT_DECFLOAT7: number;

  export const SQL_CVT_DECIMAL: number;

  export const SQL_CVT_DOUBLE: number;

  export const SQL_CVT_FLOAT: number;

  export const SQL_CVT_INTEGER: number;

  export const SQL_CVT_INTERVAL_DAY_TIME: number;

  export const SQL_CVT_INTERVAL_YEAR_MONTH: number;

  export const SQL_CVT_LONGVARBINARY: number;

  export const SQL_CVT_LONGVARCHAR: number;

  export const SQL_CVT_NUMERIC: number;

  export const SQL_CVT_REAL: number;

  export const SQL_CVT_SMALLINT: number;

  export const SQL_CVT_TIME: number;

  export const SQL_CVT_TIMESTAMP: number;

  export const SQL_CVT_TINYINT: number;

  export const SQL_CVT_VARBINARY: number;

  export const SQL_CVT_VARCHAR: number;

  export const SQL_CVT_WCHAR: number;

  export const SQL_CVT_WLONGVARCHAR: number;

  export const SQL_CVT_WVARCHAR: number;

  export const SQL_C_DEFAULT: number;

  export const SQL_DATABASE_NAME: number;

  export const SQL_DATALINK: number;

  export const SQL_DATASOURCE_NAME: number;

  export const SQL_DATA_AT_EXEC: number;

  export const SQL_DATA_SOURCE_NAME: number;

  export const SQL_DATA_SOURCE_READ_ONLY: number;

  export const SQL_DATE: number;

  export const SQL_DATETIME: number;

  export const SQL_DBCLOB: number;

  export const SQL_DBCLOB_LOCATOR: number;

  export const SQL_DBMS_NAME: number;

  export const SQL_DBMS_VER: number;

  export const SQL_DECFLOAT: number;

  export const SQL_DECIMAL: number;

  export const SQL_DEFAULT: number;

  export const SQL_DEFAULT_PARAM: number;

  export const SQL_DEFAULT_TXN_ISOLATION: number;

  export const SQL_DESCRIBE_PARAMETER: number;

  export const SQL_DESC_ALLOC_AUTO: number;

  export const SQL_DESC_ALLOC_TYPE: number;

  export const SQL_DESC_ALLOC_USER: number;

  export const SQL_DESC_AUTO_INCREMENT: number;

  export const SQL_DESC_BASE_COLUMN: number;

  export const SQL_DESC_BASE_SCHEMA: number;

  export const SQL_DESC_BASE_TABLE: number;

  export const SQL_DESC_COLUMN_CCSID: number;

  export const SQL_DESC_COUNT: number;

  export const SQL_DESC_DATA_PTR: number;

  export const SQL_DESC_DATETIME_INTERVAL_CODE: number;

  export const SQL_DESC_DISPLAY_SIZE: number;

  export const SQL_DESC_INDICATOR_PTR: number;

  export const SQL_DESC_LABEL: number;

  export const SQL_DESC_LENGTH: number;

  export const SQL_DESC_LENGTH_PTR: number;

  export const SQL_DESC_MONEY: number;

  export const SQL_DESC_NAME: number;

  export const SQL_DESC_NULLABLE: number;

  export const SQL_DESC_PRECISION: number;

  export const SQL_DESC_SCALE: number;

  export const SQL_DESC_SEARCHABLE: number;

  export const SQL_DESC_TYPE: number;

  export const SQL_DESC_TYPE_NAME: number;

  export const SQL_DESC_UNNAMED: number;

  export const SQL_DESC_UPDATABLE: number;

  export const SQL_DIAG_AUTOGEN_KEY: number;

  export const SQL_DIAG_CLASS_ORIGIN: number;

  export const SQL_DIAG_CONNECTION_NAME: number;

  export const SQL_DIAG_DYNAMIC_FUNCTION: number;

  export const SQL_DIAG_MESSAGE_TEXT: number;

  export const SQL_DIAG_MESSAGE_TOKENS: number;

  export const SQL_DIAG_NATIVE: number;

  export const SQL_DIAG_NUMBER: number;

  export const SQL_DIAG_RETURNCODE: number;

  export const SQL_DIAG_ROW_COUNT: number;

  export const SQL_DIAG_SERVER_NAME: number;

  export const SQL_DIAG_SQLSTATE: number;

  export const SQL_DIAG_SUBCLASS_ORIGIN: number;

  export const SQL_DOUBLE: number;

  export const SQL_DRIVER_COMPLETE: number;

  export const SQL_DRIVER_COMPLETE_REQUIRED: number;

  export const SQL_DRIVER_NAME: number;

  export const SQL_DRIVER_NOPROMPT: number;

  export const SQL_DRIVER_ODBC_VER: number;

  export const SQL_DRIVER_PROMPT: number;

  export const SQL_DRIVER_VER: number;

  export const SQL_DROP: number;

  export const SQL_ENSURE: number;

  export const SQL_ERROR: number;

  export const SQL_FALSE: number;

  export const SQL_FETCH_ABSOLUTE: number;

  export const SQL_FETCH_FIRST: number;

  export const SQL_FETCH_LAST: number;

  export const SQL_FETCH_NEXT: number;

  export const SQL_FETCH_PRIOR: number;

  export const SQL_FETCH_RELATIVE: number;

  export const SQL_FILE_APPEND: number;

  export const SQL_FILE_CREATE: number;

  export const SQL_FILE_OVERWRITE: number;

  export const SQL_FILE_READ: number;

  export const SQL_FIRST_IO: number;

  export const SQL_FLOAT: number;

  export const SQL_FMT_DMY: number;

  export const SQL_FMT_EUR: number;

  export const SQL_FMT_HMS: number;

  export const SQL_FMT_ISO: number;

  export const SQL_FMT_JIS: number;

  export const SQL_FMT_JOB: number;

  export const SQL_FMT_JUL: number;

  export const SQL_FMT_MDY: number;

  export const SQL_FMT_USA: number;

  export const SQL_FMT_YMD: number;

  export const SQL_FN_CVT_CAST: number;

  export const SQL_FN_CVT_CONVERT: number;

  export const SQL_FN_NUM_ABS: number;

  export const SQL_FN_NUM_ACOS: number;

  export const SQL_FN_NUM_ASIN: number;

  export const SQL_FN_NUM_ATAN: number;

  export const SQL_FN_NUM_ATAN2: number;

  export const SQL_FN_NUM_CEILING: number;

  export const SQL_FN_NUM_COS: number;

  export const SQL_FN_NUM_COT: number;

  export const SQL_FN_NUM_DEGREES: number;

  export const SQL_FN_NUM_EXP: number;

  export const SQL_FN_NUM_FLOOR: number;

  export const SQL_FN_NUM_LOG: number;

  export const SQL_FN_NUM_LOG10: number;

  export const SQL_FN_NUM_MOD: number;

  export const SQL_FN_NUM_PI: number;

  export const SQL_FN_NUM_POWER: number;

  export const SQL_FN_NUM_RADIANS: number;

  export const SQL_FN_NUM_RAND: number;

  export const SQL_FN_NUM_ROUND: number;

  export const SQL_FN_NUM_SIGN: number;

  export const SQL_FN_NUM_SIN: number;

  export const SQL_FN_NUM_SQRT: number;

  export const SQL_FN_NUM_TAN: number;

  export const SQL_FN_NUM_TRUNCATE: number;

  export const SQL_FN_STR_CONCAT: number;

  export const SQL_FN_STR_LCASE: number;

  export const SQL_FN_STR_LENGTH: number;

  export const SQL_FN_STR_LTRIM: number;

  export const SQL_FN_STR_POSITION: number;

  export const SQL_FN_STR_RTRIM: number;

  export const SQL_FN_STR_SUBSTRING: number;

  export const SQL_FN_STR_UCASE: number;

  export const SQL_FN_TD_CURDATE: number;

  export const SQL_FN_TD_CURRENT_DATE: number;

  export const SQL_FN_TD_CURRENT_TIME: number;

  export const SQL_FN_TD_CURRENT_TIMESTAMP: number;

  export const SQL_FN_TD_CURTIME: number;

  export const SQL_FN_TD_DAYNAME: number;

  export const SQL_FN_TD_DAYOFMONTH: number;

  export const SQL_FN_TD_DAYOFWEEK: number;

  export const SQL_FN_TD_DAYOFYEAR: number;

  export const SQL_FN_TD_EXTRACT: number;

  export const SQL_FN_TD_HOUR: number;

  export const SQL_FN_TD_MINUTE: number;

  export const SQL_FN_TD_MONTH: number;

  export const SQL_FN_TD_MONTHNAME: number;

  export const SQL_FN_TD_NOW: number;

  export const SQL_FN_TD_QUARTER: number;

  export const SQL_FN_TD_SECOND: number;

  export const SQL_FN_TD_TIMESTAMPADD: number;

  export const SQL_FN_TD_TIMESTAMPDIFF: number;

  export const SQL_FN_TD_WEEK: number;

  export const SQL_FN_TD_YEAR: number;

  export const SQL_GB_GROUP_BY_CONTAINS_SELECT: number;

  export const SQL_GB_GROUP_BY_EQUALS_SELECT: number;

  export const SQL_GB_NOT_SUPPORTED: number;

  export const SQL_GB_NO_RELATION: number;

  export const SQL_GRAPHIC: number;

  export const SQL_GROUP_BY: number;

  export const SQL_HANDLE_DBC: SqlHandleHType;

  export const SQL_HANDLE_DBC_UNICODE: number;

  export const SQL_HANDLE_DESC: number;

  export const SQL_HANDLE_ENV: SqlHandleHType;

  export const SQL_HANDLE_STMT: SqlHandleHType;

  export const SQL_HEX_IS_BINARY: number;

  export const SQL_HEX_IS_CHAR: number;

  export const SQL_HEX_SORT_SEQUENCE: number;

  export const SQL_IC_LOWER: number;

  export const SQL_IC_MIXED: number;

  export const SQL_IC_SENSITIVE: number;

  export const SQL_IC_UPPER: number;

  export const SQL_IDENTIFIER_CASE: number;

  export const SQL_IDENTIFIER_QUOTE_CHAR: number;

  export const SQL_INDEX_ALL: number;

  export const SQL_INDEX_OTHER: number;

  export const SQL_INDEX_UNIQUE: number;

  export const SQL_INITIALLY_DEFERRED: number;

  export const SQL_INITIALLY_IMMEDIATE: number;

  export const SQL_INSENSITIVE: number;

  export const SQL_INTEGER: number;

  export const SQL_INTEGER_PREC: number;

  export const SQL_INVALID_HANDLE: number;

  export const SQL_JOBRUN_SORT_SEQUENCE: number;

  export const SQL_JOB_SORT_SEQUENCE: number;

  export const SQL_KEYWORDS: number;

  export const SQL_LIKE_ESCAPE_CLAUSE: number;

  export const SQL_LIKE_ONLY: number;

  export const SQL_LOCK_TYPES: number;

  export const SQL_LONGVARBINARY: number;

  export const SQL_LONGVARCHAR: number;

  export const SQL_LONGVARGRAPHIC: number;

  export const SQL_MAX_CATALOG_NAME_LEN: number;

  export const SQL_MAX_COLUMNS_IN_GROUP_BY: number;

  export const SQL_MAX_COLUMNS_IN_INDEX: number;

  export const SQL_MAX_COLUMNS_IN_ORDER_BY: number;

  export const SQL_MAX_COLUMNS_IN_SELECT: number;

  export const SQL_MAX_COLUMNS_IN_TABLE: number;

  export const SQL_MAX_COLUMN_NAME_LEN: number;

  export const SQL_MAX_CONCURRENT_ACTIVITIES: number;

  export const SQL_MAX_CURSOR_NAME_LEN: number;

  export const SQL_MAX_DRIVER_CONNECTIONS: number;

  export const SQL_MAX_MESSAGE_LENGTH: number;

  export const SQL_MAX_OPTION_STRING_LENGTH: number;

  export const SQL_MAX_OWNER_NAME_LEN: number;

  export const SQL_MAX_ROW_SIZE: number;

  export const SQL_MAX_SCHEMA_NAME_LEN: number;

  export const SQL_MAX_STATEMENT_LEN: number;

  export const SQL_MAX_TABLES_IN_SELECT: number;

  export const SQL_MAX_TABLE_NAME_LEN: number;

  export const SQL_MODE_DEFAULT: number;

  export const SQL_MODE_READ_ONLY: number;

  export const SQL_MODE_READ_WRITE: number;

  export const SQL_MULTIPLE_ACTIVE_TXN: number;

  export const SQL_NEED_DATA: number;

  export const SQL_NNC_NON_NULL: number;

  export const SQL_NNC_NULL: number;

  export const SQL_NON_NULLABLE_COLUMNS: number;

  export const SQL_NOT_DEFERRABLE: number;

  export const SQL_NO_ACTION: number;

  export const SQL_NO_DATA: number;

  export const SQL_NO_DATA_FOUND: number;

  export const SQL_NO_NULLS: number;

  export const SQL_NO_TOTAL: number;

  export const SQL_NTS: number;

  export const SQL_NULLABLE: number;

  export const SQL_NULLABLE_UNKNOWN: number;

  export const SQL_NULL_DATA: number;

  export const SQL_NULL_HANDLE: number;

  export const SQL_NUMERIC: number;

  export const SQL_NUMERIC_FUNCTIONS: number;

  export const SQL_OAC_LEVEL1: number;

  export const SQL_OAC_LEVEL2: number;

  export const SQL_OAC_NONE: number;

  export const SQL_ODBC_API_CONFORMANCE: number;

  export const SQL_ODBC_SQL_CONFORMANCE: number;

  export const SQL_ORDER_BY_COLUMNS_IN_SELECT: number;

  export const SQL_OSC_CORE: number;

  export const SQL_OSC_EXTENDED: number;

  export const SQL_OSC_MINIMUM: number;

  export const SQL_OUTER_JOINS: number;

  export const SQL_OU_DML_STATEMENTS: number;

  export const SQL_OU_INDEX_DEFINITION: number;

  export const SQL_OU_PRIVILEGE_DEFINITION: number;

  export const SQL_OU_PROCEDURE_INVOCATION: number;

  export const SQL_OU_TABLE_DEFINITION: number;

  export const SQL_OWNER_TERM: number;

  export const SQL_OWNER_USAGE: number;

  export const SQL_PARAM_INPUT: number;

  export const SQL_PARAM_INPUT_OUTPUT: number;

  export const SQL_PARAM_OUTPUT: number;

  export const SQL_PC_NOT_PSEUDO: number;

  export const SQL_PC_PSEUDO: number;

  export const SQL_PC_UNKNOWN: number;

  export const SQL_POSITIONED_STATEMENTS: number;

  export const SQL_POS_ADD: number;

  export const SQL_POS_DELETE: number;

  export const SQL_POS_OPERATIONS: number;

  export const SQL_POS_POSITION: number;

  export const SQL_POS_REFRESH: number;

  export const SQL_POS_UPDATE: number;

  export const SQL_PROCEDURES: number;

  export const SQL_PROCEDURE_TERM: number;

  export const SQL_PS_POSITIONED_DELETE: number;

  export const SQL_PS_POSITIONED_UPDATE: number;

  export const SQL_PS_SELECT_FOR_UPDATE: number;

  export const SQL_PT_FUNCTION: number;

  export const SQL_PT_PROCEDURE: number;

  export const SQL_PT_UNKNOWN: number;

  export const SQL_QL_END: number;

  export const SQL_QL_START: number;

  export const SQL_QUALIFIER_LOCATION: number;

  export const SQL_QUALIFIER_NAME_SEPARATOR: number;

  export const SQL_QUALIFIER_TERM: number;

  export const SQL_QUALIFIER_USAGE: number;

  export const SQL_QUICK: number;

  export const SQL_QUOTED_IDENTIFIER_CASE: number;

  export const SQL_QU_DML_STATEMENTS: number;

  export const SQL_QU_INDEX_DEFINITION: number;

  export const SQL_QU_NOT_SUPPORTED: number;

  export const SQL_QU_PRIVILEGE_DEFINITION: number;

  export const SQL_QU_PROCEDURE_INVOCATION: number;

  export const SQL_QU_TABLE_DEFINITION: number;

  export const SQL_REAL: number;

  export const SQL_RESET_PARAMS: number;

  export const SQL_RESTRICT: number;

  export const SQL_ROLLBACK: number;

  export const SQL_ROLLBACK_HOLD: number;

  export const SQL_ROWSET_SIZE: number;

  export const SQL_SAVEPOINT_NAME_RELEASE: number;

  export const SQL_SAVEPOINT_NAME_ROLLBACK: number;

  export const SQL_SCHEMA_TERM: number;

  export const SQL_SCHEMA_USAGE: number;

  export const SQL_SCOPE_CURROW: number;

  export const SQL_SCOPE_SESSION: number;

  export const SQL_SCOPE_TRANSACTION: number;

  export const SQL_SC_FIPS127_2_TRANSITIONAL: number;

  export const SQL_SC_SQL92_ENTRY: number;

  export const SQL_SC_SQL92_FULL: number;

  export const SQL_SC_SQL92_INTERMEDIATE: number;

  export const SQL_SEARCHABLE: number;

  export const SQL_SEARCH_PATTERN_ESCAPE: number;

  export const SQL_SENSITIVE: number;

  export const SQL_SEP_BLANK: number;

  export const SQL_SEP_COLON: number;

  export const SQL_SEP_COMMA: number;

  export const SQL_SEP_DASH: number;

  export const SQL_SEP_JOB: number;

  export const SQL_SEP_PERIOD: number;

  export const SQL_SEP_SLASH: number;

  export const SQL_SET_DEFAULT: number;

  export const SQL_SET_NULL: number;

  export const SQL_SKIP_LOCKED_DATA: number;

  export const SQL_SMALLINT: number;

  export const SQL_SMALLINT_PREC: number;

  export const SQL_SP_BETWEEN: number;

  export const SQL_SP_COMPARISON: number;

  export const SQL_SP_EXISTS: number;

  export const SQL_SP_IN: number;

  export const SQL_SP_ISNOTNULL: number;

  export const SQL_SP_ISNULL: number;

  export const SQL_SP_LIKE: number;

  export const SQL_SP_MATCH_FULL: number;

  export const SQL_SP_MATCH_PARTIAL: number;

  export const SQL_SP_MATCH_UNIQUE_FULL: number;

  export const SQL_SP_MATCH_UNIQUE_PARTIAL: number;

  export const SQL_SP_OVERLAPS: number;

  export const SQL_SP_QUANTIFIED_COMPARISON: number;

  export const SQL_SP_UNIQUE: number;

  export const SQL_SQL92_PREDICATES: number;

  export const SQL_SQL92_VALUE_EXPRESSIONS: number;

  export const SQL_SQLSTATE_SIZE: number;

  export const SQL_SQL_CONFORMANCE: number;

  export const SQL_STILL_EXECUTING: number;

  export const SQL_STRING_FUNCTIONS: number;

  export const SQL_SUCCESS: number;

  export const SQL_SUCCESS_WITH_INFO: number;

  export const SQL_SVE_CASE: number;

  export const SQL_SVE_CAST: number;

  export const SQL_SVE_COALESCE: number;

  export const SQL_SVE_NULLIF: number;

  export const SQL_TABLE_STAT: number;

  export const SQL_TC_ALL: number;

  export const SQL_TC_DDL_COMMIT: number;

  export const SQL_TC_DDL_IGNORE: number;

  export const SQL_TC_DML: number;

  export const SQL_TC_NONE: number;

  export const SQL_TIME: number;

  export const SQL_TIMEDATE_FUNCTIONS: number;

  export const SQL_TIMESTAMP: number;

  export const SQL_TRUE: number;

  export const SQL_TXN_CAPABLE: number;

  export const SQL_TXN_CLEAR: number;

  export const SQL_TXN_CREATE: number;

  export const SQL_TXN_END: number;

  export const SQL_TXN_END_FAIL: number;

  export const SQL_TXN_FIND: number;

  export const SQL_TXN_HOLD: number;

  export const SQL_TXN_ISOLATION: number;

  export const SQL_TXN_NOCOMMIT: number;

  export const SQL_TXN_NO_COMMIT: number;

  export const SQL_TXN_READ_COMMITTED: number;

  export const SQL_TXN_READ_COMMITTED_MASK: number;

  export const SQL_TXN_READ_UNCOMMITTED: number;

  export const SQL_TXN_READ_UNCOMMITTED_MASK: number;

  export const SQL_TXN_REPEATABLE_READ: number;

  export const SQL_TXN_REPEATABLE_READ_MASK: number;

  export const SQL_TXN_RESUME: number;

  export const SQL_TXN_SERIALIZABLE: number;

  export const SQL_TXN_SERIALIZABLE_MASK: number;

  export const SQL_TYPE_DATE: number;

  export const SQL_TYPE_TIME: number;

  export const SQL_TYPE_TIMESTAMP: number;

  export const SQL_UNASSIGNED: number;

  export const SQL_UNBIND: number;

  export const SQL_UNSEARCHABLE: number;

  export const SQL_UNSPECIFIED: number;

  export const SQL_UNUSED: number;

  export const SQL_USER_NAME: number;

  export const SQL_USE_CURRENTLY_COMMITTED: number;

  export const SQL_UTF8_CHAR: number;

  export const SQL_VARBINARY: number;

  export const SQL_VARCHAR: number;

  export const SQL_VARGRAPHIC: number;

  export const SQL_WAIT_FOR_OUTCOME: number;

  export const SQL_WCHAR: number;

  export const SQL_WLONGVARCHAR: number;

  export const SQL_WVARCHAR: number;

  export const SQL_XML: number;

  export const STRING: number;

  export namespace Connection {
    /**
     * Closes the Connection to the DB and frees the connection object.
     * @returns {Promise} - Promise object represents the closure of the Connection.
     * @memberof Connection
     */
    function close(): Promise<any>;

    /**
     * Establishes a Connection to the database.
     * @param {string} [url] - The url of the database to connect to, which Defaults to '*LOCAL'.
     * @param {string} [username] - The user name for the database user.
     * @param {string} [password] - The password for the database user.
     * @returns {object} - The dbConn Object with an established connection.
     * @memberof Connection
     */
    function connect(
      url?: string,
      username?: string,
      password?: string
    ): Connection;

    /**
     * Prints more detailed info if choice = true. Turned off by setting choice = false.
     * @param {boolean} choice - The option either true or false to turn on debugging.
     * @returns {Promise} - Promise object represents the debug method being set to the choice specified.
     * @memberof Connection
     */
    function debug(choice: boolean): Promise<any>;

    /**
     * Disconnects an existing connection to the database.
     * @returns {Promise} - Promise object represents the disconnect of the Connection.
     * @memberof Connection
     */
    function disconn(): Promise<any>;

    /**
     * If a connection attribute exists then return type String or Int depending on the attribute type
     * @param {number} attribute
     * @returns {Promise} - Promise object represents the the current settings for the specified connection attribute.
     * Further Documentation {@link https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_73/cli/rzadpfnsconx.htm HERE}
     * @memberof Connection
     */
    function getConnAttr(attribute: number): Promise<any>;

    /**
     * Returns a Statment Object initialized to the current dbConn Connection.
     * @returns {object} - A new Statement initialized with the current dbconn.
     * @memberof Connection
     */
    function getStatement(): Statement;

    /**
     * Checks if the Connection object is connected to the db.
     * @returns {boolean} - true or false indicating if the Connection object is currently connected.
     */
    function isConnected(): boolean;

    /**
     * Sets the ConnAttr. Attribute should be INT.
     * @param {number} attribute - The attribute to be set refer to the getConAttr example to view available attributes.
     * @param {(string | number)} value - The value to set the attribute to. Can be String or Int depending the attribute.
     * @returns {Promise} - Promise object represents the execution of the setConnAttr().
     * @memberof Connection
     */
    function setConnAttr(
      attribute: number,
      value: string | number
    ): Promise<any>;

    /**
     * Checks if the given SQL is valid and interprets vendor escape clauses.
     * @param {string} sql - The sql string to be validated.
     * @returns {Promise} - Promise object represents the transformed SQL string that is seen by the data source.
     */
    function validStmt(sql: string): Promise<any>;
  }

  export namespace DBPool {
    /**
     * Finds and returns the first available Connection.
     * @returns {DBPoolConnection} - one connection from the DBPool.
     */
    function attach(): Connection;

    /**
     * Instantiates a new instance of DBPoolConnection with an `index` and appends it to the pool.
     * Assumes the database of the pool when establishing the connection.
     * @param {number} index - An identifier to id the connection for debug purposes.
     */
    function createConnection(index: number): Connection;

    /**
     * Frees a connection (Returns the connection "Available" back to true)
     * closes any statements and gets a new statement.
     * @param {DBPoolConnection} connection
     * @returns {boolean} - true if detached succesfully
     */
    function detach(connection: Connection): void;

    /**
     * Frees all connections in the pool (Sets "Available" back to true for all)
     * closes any statements and gets a new statement.
     * @returns {boolean} - true if all were detached succesfully
     */
    function detachAll(): boolean;

    /**
     *Internal helper function to format params and set Param Indicator & Bind Type
     * @param {array} boundParams - the array to push the formatted parmeter.
     * @param {object} options - an object with config options {io: in | out | both, asClob: true | false}.
     */
    function formatParams(boundParams: any[], options: {}): void;

    /**
     * Internal function used to log debug information to the console.
     * @param {string} message - the message to log.
     */
    function log(message: string): void;

    /**
     * Shortcut to prepare ,bind, and execute. Just provide the sql and the params as an array.
     * @param {string} sql - the sql to prepare , include parameter markers (?, ?, ...)
     * @param {array} [params] - an optional array of values to bind. order of the values in the array must match the
     * order of the desired parameter marker in the sql string.
     * @return {object} - In the Format: {resultSet: [], outputParams: []}
     * if the Prepared SQL returns result set it is returned as an array of objects.
     * if the Prepared SQL returns output parameters it is returned as an array of objects/
     * else null will be returned indicating that there is no result set or outputParams.
     */
    function prepareExecute(
      sql: string,
      params: any[],
      options: {}
    ): { resultSet: any[]; outputParams: any[] };

    /**
     * Retires a connection from being used and removes it from the pool
     * @param {DBPoolConnection} connection
     */
    function retire(connection: Connection): void;

    /**
     * Retires (Removes) all connections from being used again
     * @returns {boolean} - true if all were retired succesfully
     */
    function retireAll(): void;

    /**
     * Shorthand to exec a statement , just provide the sql to run.
     * @param {string} sql - the sql statment to execute.
     * @return {array} - if the SQL returns a result set it is returned as an array of objects.
     *  else if no result set is available null is returned. caller should check if null is returned.
     */
    function runSql(sql: string): any[];

    /**
     * Sets the connection attribute for each a DBPoolConnection in the pool.
     * @param {object} connectionAttribute with the properties {attribute: integer, value: integer | String}
     */
    function setConnectionAttribute(connectionAttribute: {
      attribute: number;
      value: number | String;
    }): void;

    /**
     *Internal helper function to format params and set Param Indicator & Bind Type
     * @param {array} params - an array of values to bind. type of values should be (string , number , or null)
     * @param {object} options - an object with config options to set for all parameters.
     * Currently, the input/output indicatior is the only available option to set. {io: in | out | both}.
     * This will overide the default which is to bind as 'both'.
     * @returns {array} - an array of bounded params properly formated to use.
     */
    function setupParams(params: any[], options: {}): any[];
  }

  export namespace Statement {
    /**
     * Shorthand for bindParam
     * @param {Array} params - An Array of the parameter list. See `bindParam` for additional documentation.
     * @memberof Statement
     */
    function bind(params: BindParamParameter[]): Promise<any>;

    /**
     * Associates parameter markers in an SQL statement to app variables.
     * @param {Array} params - An Array of the parameter list. Each parameter element will also be an Array with 3 values (Value, In/out Type, Indicator).
     * @returns {Promise} - Promise object represents the execution of bindParam().
     * @memberof Statement
     */
    function bindParam(params: BindParamParameter[]): Promise<any>;

    /**
     * Ends and frees the statement object.
     * @returns {Promise} - Promise object represents the execution of close().
     * @memberof Statement
     */
    function close(): Promise<any>;

    /**
     * Closes the cursor associated with the dbstmt object and discards any pending results.
     * @returns {Promise} - Promise object represents the execution of closeCursor().
     * @memberof Statement
     */
    function closeCursor(): Promise<any>;

    /**
     * Adds all changes to the database that have been made on the connection since connect time.
     * @returns {Promise} - Promise object represents the execution of Commit().
     * @memberof Statement
     */
    function commit(): Promise<any>;

    /**
     * performs action of given SQL String. The exec() method does not work with stored procedure calls use execute() instead.
     * @param {string} sqlString
     * @returns the result set as an array.
     * @returns {Promise} - Promise object represents the result set from the exection of exec().
     * @memberof Statement
     */
    function exec(sqlString: string): Promise<any>;

    /**
     * Runs a statement that was successfully prepared using prepare().
     * Use execute() for stored procedure calls.
     * @returns {Promise} - Promise object represents the execution of execute().
     * @memberof Statement
     */
    function execute(): Promise<any[]>;

    /**
     * If a result exists, retrieve a row from the result set
     * @returns {Promise | null} - Promise object represents the row that was retrieved from the execution of fetch().
     * when no data is found null is returned , indicating there ws nothing to return from fetch call.
     * @memberof Statement
     */
    function fetch(): Promise<any>;

    /**
     * If a result set exists, retrieve all the rows of data from the result set.
     * @returns {Promise} - Promise object represents the the an array containing the result that was retrieved from the execution of fetchAll().
     * @memberof Statement
     */
    function fetchAll(): Promise<any>;

    /**
     * Helper function to simplify function bodies like fieldName or fieldNullable.
     * Requires an int index parameter. If a valid index is provided, returns the name of the indicated field.
     * @param suffix The suffix of the function name to call.
     * @param {number} index - The position of the field within the table. It is 0 based.
     * @memberof Statement
     */
    function field(suffix: any, index: number): Promise<any>;

    /**
     * Requires an int index parameter. If a valid index is provided, returns the name of the indicated field.
     * @param {number} index - The position of the field within the table. It is 0 based.
     * @returns {Promise} - Promise object represents the the String that was retrieved from the execution of fieldName().
     * @memberof Statement
     */
    function fieldName(index: number): Promise<any>;

    /**
     * Requires an int index parameter. If a valid index is provided, returns t/f if the indicated field can be Null
     * @param {number} index - The position of the field within the table. It is 0 based.
     * @returns {Promise} - Promise object represents the the boolean that was retrieved from the execution of fieldNullable().
     * @memberof Statement
     */
    function fieldNullable(index: number): Promise<any>;

    /**
     * Requires an int index parameter. If a valid index is provided, returns the precision of the indicated field
     * @param {number} index - The position of the field within the table. It is 0 based.
     * @returns {Promise} - Promise object represents the the Number that was retrieved from the execution of fieldPrecise().
     * @memberof Statement
     */
    function fieldPrecise(index: number): Promise<any>;

    /**
     * Requires an int index parameter. If a valid index is provided, returns the scale of the indicated column
     * @param {number} index - The position of the field within the table. It is 0 based.
     * @returns {Promise} - Promise object represents the the Number that was retrieved from the execution of fieldScale().
     * @memberof Statement
     */
    function fieldScale(index: number): Promise<any>;

    /**
     * requires an int index parameter. If a valid index is provided, returns the data type of the indicated field
     * @param {number} index - the postion of the field within the table. It is 0 based.
     * @returns {Promise} - Promise object represents the the Number that was retrieved from the execution of fieldType().
     * @memberof Statement
     */
    function fieldType(index: number): Promise<any>;

    /**
     * requires an int index parameter. If a valid index is provided, returns the field width of the indicated field
     * @param {number} index - the postion of the field within the table. It is 0 based.
     * @returns {Promise} - Promise object represents the the Number that was retrieved from the execution of fieldWidth().
     * @memberof Statement
     */
    function fieldWidth(index: number): Promise<any>;

    /**
     * If a valid Statment attribute is provided , returns the current settings for the specified Statement attribute.
     * Refer to the list below for valid Statement Attributes.
     * @param {number} attribute - the statement attribute to get
     * @returns {Promise} Promise object represents the the String | Number that was retrieved from the execution of getStmtAttr().
     * @memberof Statement
     * Further Documentation {@link https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_73/cli/rzadpfnsstma.htm HERE}
     */
    function getStmtAttr(attribute: number): Promise<any>;

    /**
     * Determines whether there is more information available on the statement
     * @returns {Promise} - Promise object represents the execution of nextResult().
     * @memberof Statement
     */
    function nextResult(): Promise<any>;

    /**
     * If a result is available, retrieve number of fields contained in result.
     * @returns {Promise} - Promise object represents the Number returned from the execution of numFields().
     * @memberof Statement
     */
    function numFields(): Promise<any>;

    /**
     * if a query was performed ,retrieves number of rows that were effected by a query
     * @returns {Promise} - Promise object represents the Number returned from the execution of numRows().
     * @memberof Statement
     */
    function numRows(): Promise<any>;

    /**
     * If valid SQL is provided, prepare SQL and send it to the DBMS.
     * @param {string} sqlString - The SQL string to be prepared.
     * @returns {Promise} - Promise object represents the the execution of prepare().
     * @example - View the examples located at the excute() method.
     * @memberof Statement
     */
    function prepare(sqlString: string): Promise<any>;

    /**
     * Reverts changes to the database that have been made on the connection since connect time or the previous call to commit().
     * @memberof Statement
     */
    function rollback(): Promise<any>;

    /**
     * If a valid attribute and value is provided, set StmtAttr indicate Attribute. Refer to the example @getStmtAttr for a list of valid Statement Attributes.
     * @param {number} attribute - must be an int.
     * @param {(string | number)} value -  can String or Int depending on the attribute
     * @returns {Promise} - Promise object represents the execution of setStmtAttr().
     * @memberof Statement
     */
    function setStmtAttr(
      attribute: number,
      value: string | number
    ): Promise<any>;

    /**
     * Returns the diagnostic information associated with the most recently called function for a particular statement, connection, or environment handler.
     * @param {number} hType - Indicates the handler type of diagnostic information.
     * @example hType can be following values:
     * SQL_HANDLE_ENV:Retrieve the environment diagnostic information
     * SQL_HANDLE_DBC:Retrieve the connection diagnostic information
     * SQL_HANDLE_STMT:Retrieve the statement diagnostic information
     * @param {number} index - Indicates which error should be retrieved. The first error record index is number 1.
     * @returns {Promise} - Promise object represents Number retrieved from the execution of stmtError().
     * @memberof Statement
     */
    function stmtError(hType: SqlHandleHType, index: number): Promise<any>;
  }

  type BindParamParameter = [(string | number), BindParamIo, number];
}
